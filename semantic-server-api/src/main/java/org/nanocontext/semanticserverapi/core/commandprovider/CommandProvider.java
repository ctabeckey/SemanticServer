package org.nanocontext.semanticserverapi.core.commandprovider;

import org.nanocontext.semanticserverapi.core.commandprocessor.RoutingToken;
import org.nanocontext.semanticserverapi.core.commandprovider.exceptions.CommandProviderException;
import org.nanocontext.semanticserverapi.core.semantics.CommandClassSemantics;

import java.util.concurrent.Callable;

/**
 * THe definition of a CommandProvider
 */
public interface CommandProvider {
    /**
     * The publisher can be used to select a specific CommandProvider if
     * there are multiple Command implementations available.
     * @return
     */
    String getPublisher();

    <R, C extends Callable<R>> C createCommand(
            RoutingToken routingToken,
            CommandClassSemantics commandClassSemantics,
            Object[] parameters,
            Class<R> resultType)
            throws CommandProviderException;

    /**
     * Find a Command meeting the semantics, that can be instantiated with the
     * parameter types and whose invoke method returns the resultType.
     * The RoutingToken may be used to select or initialize the Command implementation.
     * @param routingToken
     * @param commandClassSemantics
     * @param parameterTypes
     * @param resultType
     * @return
     * @throws CommandProviderException
     */
    CommandInstantiationToken findCommand(
            final RoutingToken routingToken,
            final CommandClassSemantics commandClassSemantics,
            final Class<?>[] parameterTypes,
            final Class<?> resultType)
            throws CommandProviderException;

    /**
     * Create a Command from a CommandInstantiationToken that was previously generated by this
     * Provider and using the given parameters to instantiate the instance.
     * @param commandInstantiationToken
     * @param parameters
     * @return
     * @throws CommandProviderException
     */
    Callable<?> createCommand(
            final CommandInstantiationToken commandInstantiationToken,
            final Object[] parameters)
            throws CommandProviderException;

}
