package com.paypal.credit.core.processorbridge;

import com.paypal.credit.core.Application;
import com.paypal.credit.core.commandprocessor.AsynchronousExecutionCallback;
import com.paypal.credit.core.commandprocessor.exceptions.UnknownCommandException;
import com.paypal.credit.core.semantics.exceptions.CoreRouterSemanticsException;
import com.paypal.credit.utility.ParameterCheckUtility;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.concurrent.Callable;

/**
 * An abstract, base, implementation of a ProcessorBridge.
 * Contains convenience methods for ProcessorBridge implementations.
 *
 * BIG IMPORTANT NOTE: this class is used as the base class for both
 * the dynamic proxy and the generated byte code implementations of
 * the processor bridge.
 * Modify with care, any changes will be silently contained in code
 * generated at runtime.
 */
public abstract class AbstractProcessorBridgeImpl {
    private static final Logger LOGGER =
            LoggerFactory.getLogger(AbstractProcessorBridgeImpl.class);
    private final Application application;

    /**
     *
     * @param application
     */
    public AbstractProcessorBridgeImpl(Application application) {
        ParameterCheckUtility.checkParameterNotNull(application, "application");

        LOGGER.info("ProcessorBridgeProxyInvocationHandler <ctor>");
        this.application = application;
    }

    protected Application getApplication() {
        return application;
    }

    /**
     * Execute a Command and return the result.
     *
     * @param command
     * @return
     * @throws CoreRouterSemanticsException
     * @throws UnknownCommandException
     */
    protected <R> R executeCommand(final Callable<R> command)
            throws CoreRouterSemanticsException, UnknownCommandException {
        R result;// execute the mapped command
        try {
            result = getApplication().getCommandProcessor().doSynchronously(command);
        } catch (CoreRouterSemanticsException e) {
            e.printStackTrace();
            throw e;
        } catch (Throwable t) {
            throw new UnknownCommandException(command.getClass(), t);
        }
        return result;
    }

    /**
     * Submit a Command for asynchronous execution.
     *
     * @param <R>
     * @param command
     * @param callback
     * @throws UnknownCommandException
     */
    protected <R> void submitCommand(final Callable<R> command, AsynchronousExecutionCallback<R> callback)
            throws UnknownCommandException {
        try {
            getApplication().getCommandProcessor().doAsynchronously(command, callback);
        } catch (Throwable t) {
            throw new UnknownCommandException(command.getClass(), t);
        }
        return;
    }
}
