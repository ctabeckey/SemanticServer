<beans xmlns="http://credit.paypal.com/v1/schema/ctx">
    <bean id="current-thread" class="java.lang.Thread" factory-method="currentThread" scope="singleton">
    </bean>
    <bean id="root-class-loader" class="java.lang.ClassLoader" factory="current-thread" factory-method="getContextClassLoader" scope="singleton">
    </bean>

    <!--
    Create the singleton that defines the semantics of the application.
    The class must implement the org.semantics.core.semanticserver.nanocontext.ApplicationSemantics interface.

    The semantic server defines its capabilities as commands, which must follow the naming convention
    defined by this class.
    For example: "getPersonBySSN" is the name of a method (a capability) made available by the application.
    "get" is the name of an action. An action is a verb, typically CRUD or HTTP semantic actions.
    "Person" is the Subject, a class in the application model.
    "by" is the preposition and establishes that that the Person will be retrieved using the social security number.
    "SSN" is the Object, usually a class in the application model but objects could be segregated.
    In this application, the command "getPersonBySSN" must be available through the command provider.

    The default implemention of ApplicationSemantics delegates semantics to implementations of:
      org.semantics.core.semanticserver.nanocontext.Vocabulary - for actions (verbs)
      org.semantics.core.semanticserver.nanocontext.ModelVocabulary - for subjects (nouns) that comprise the application model
      org.semantics.core.semanticserver.nanocontext.Vocabulary - for prepositions, standard prepositions to establish the relation of the objects
      org.semantics.core.semanticserver.nanocontext.ModelVocabulary - for objects (nouns), usually the same as the application model
    -->
    <bean id="semantics" class="org.nanocontext.semanticserver.semanticserver.semantics.ApplicationSemanticsImpl" scope="singleton">
        <constructor-arg>
            <ref bean="root-class-loader"/>
        </constructor-arg>
        <!-- The actions that can be applied to ythe subjects in the data model, usually get, put, delete, etc... -->
        <constructor-arg>
            <bean id="actions" class="org.nanocontext.semanticserver.semanticserver.semantics.VocabularyImpl" scope="singleton" factory-method="createDefaultActionsVocabulary"/>
        </constructor-arg>
        <!-- The subjects in the data model. These are the entities that can be acted on. -->
        <constructor-arg>
            <bean id="model" class="org.nanocontext.semanticserver.semanticserver.semantics.ModelVocabularyImpl" scope="singleton" factory-method="create">
                <constructor-arg>
                    <value>com.paypal.credit.test.model</value>
                </constructor-arg>
            </bean>
        </constructor-arg>
        <!--
        Prepositions establish a relationship from the object to the subject in the context of an action.
        e.g. "getPersonBySSN", "by" is the preposition and establishes that that the Person will be retrieved
        using the social security number.
        -->
        <constructor-arg>
            <bean id="preposition" class="org.nanocontext.semanticserver.semanticserver.semantics.VocabularyImpl" scope="singleton" factory-method="createDefaultPrepositionVocabulary"/>
        </constructor-arg>
        <!--
        Objects are usually defined with the model (the objects) but could be a separate package
        -->
        <constructor-arg>
            <bean id="object" class="org.nanocontext.semanticserver.semanticserver.semantics.ModelVocabularyImpl" scope="singleton" factory-method="create">
                <constructor-arg>
                    <value>com.paypal.credit.test.model</value>
                </constructor-arg>
            </bean>
        </constructor-arg>
    </bean>

    <!--
    -->
    <bean id="command-provider" class="org.nanocontext.semanticserver.semanticserver.commandprovider.RootCommandProvider" scope="singleton">
        <constructor-arg>
            <ref bean="root-class-loader"/>
        </constructor-arg>
    </bean>

    <!--
    -->
    <bean id= "data-source-provider" class="org.nanocontext.semanticserver.semanticserver.datasourceprovider.RootDataSourceProviderImpl" factory-method="getOrCreate" scope="singleton">
        <constructor-arg>
            <ref bean="root-class-loader"/>
        </constructor-arg>
    </bean>

    <!--
    -->
    <bean id="command-processor" class="org.nanocontext.semanticserver.semanticserver.commandprocessor.CommandProcessorDefaultImpl" factory-method="create" scope="singleton">
    </bean>
</beans>
